[project]
name = "lift-tracker"
version = "0.2.1"
description = "A robust feature-complete CLI for tracking weightlifting sessions with a focus on bodybuilding"
authors = [{name = "Parker Gabel", email = "parkerdgabel@gmail.com"}]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}
keywords = ["fitness", "bodybuilding", "workout", "tracking", "weightlifting", "gym", "CLI"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Utilities",
    "Typing :: Typed",
]

dependencies = [
    "typer[all]>=0.12.0",
    "rich>=13.7.0",
    "duckdb>=1.0.0",
    "pydantic>=2.8.0",
    "plotext>=5.2.8",
    "python-dateutil>=2.9.0",
]

[project.urls]
Homepage = "https://github.com/parkerdgabel/lift"
Repository = "https://github.com/parkerdgabel/lift"
Issues = "https://github.com/parkerdgabel/lift/issues"
Changelog = "https://github.com/parkerdgabel/lift/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "ruff>=0.4.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
    "bandit[toml]>=1.7.0",
]
mcp = [
    "mcp>=1.0.0",           # Official MCP SDK
    "httpx>=0.27.0",        # For SSE transport
]

[project.scripts]
lift = "lift.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["lift"]

[tool.hatch.build.targets.wheel.force-include]
"lift/data/exercises.json" = "lift/data/exercises.json"
"lift/data/programs.json" = "lift/data/programs.json"
"lift/core/schema.sql" = "lift/core/schema.sql"
"man/lift.1" = "lift/man/lift.1"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "W",      # pycodestyle warnings
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "PL",     # pylint
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",    # line too long (handled by formatter)
    "PLR0913", # too many arguments
    "PLR2004", # magic value comparison
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR0911", # too many return statements
    "B904",    # raise exceptions with from err (not always applicable in CLI)
    "DTZ005",  # datetime.now() without tz (not needed for local app)
    "EM101",   # exception must not use string literal
    "EM102",   # exception must not use f-string literal
    "RUF001",  # ambiguous unicode character (× is intentional for multiplication)
    "RUF002",  # ambiguous unicode in docstring (× is intentional)
    "RUF003",  # ambiguous unicode in comment
    "RUF005",  # collection literal concatenation (stylistic)
    "RUF012",  # mutable class default (used intentionally)
    "SIM103",  # needless bool (stylistic)
    "SIM108",  # if-else-block instead of ternary (stylistic preference)
    "SIM115",  # use context manager (not applicable for tempfile with delete=False)
    "SIM118",  # in dict.keys() (stylistic)
    "F841",    # unused variable (some intentional for documentation)
    "ARG001",  # unused function argument (CLI handlers often have unused args)
    "PTH123",  # builtin open (not critical)
    "PLW2901", # redefined loop name (not a major issue)
    "RET504",  # unnecessary assignment before return (sometimes more readable)
    "PLW0603", # global statement (used intentionally for singleton)
    "E402",    # module imports not at top (used intentionally for lazy loading)
    "PLC0415", # import outside top level (used intentionally)
    "C403",    # unnecessary list comprehension (set() is more explicit)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ARG", "PLR2004", "PT001", "PT004", "PT011"]

[tool.ruff.lint.isort]
known-first-party = ["lift"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=lift --cov-report=term-missing --cov-report=html"
